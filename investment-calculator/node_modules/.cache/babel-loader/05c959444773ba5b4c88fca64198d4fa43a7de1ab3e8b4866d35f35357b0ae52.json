{"ast":null,"code":"var _jsxFileName = \"/home/taner/React/investment-calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport Header from \"./components/Header\";\nimport CalculatorForm from \"./components/CalculatorForm\";\nimport ResultTable from \"./components/ResultTable\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentSaving, setCurrentSaving] = useState(\"\");\n  const [yearlyContribution, setYearlyContribution] = useState(\"\");\n  const [expectedReturn, setExpectedReturn] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n  const resetHandler = () => {\n    setCurrentSaving(\"\");\n    setDuration(\"\");\n    setExpectedReturn(\"\");\n    setYearlyContribution(\"\");\n  };\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculatorForm, {\n      resetHandler: resetHandler,\n      setCurrentSaving: setCurrentSaving,\n      setYearlyContribution: setYearlyContribution,\n      setExpectedReturn: setExpectedReturn,\n      setDuration: setDuration,\n      currentSaving: currentSaving,\n      yearlyContribution: yearlyContribution,\n      expectedRetur: expectedReturn,\n      duration: duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"T1ykMmwzuEAVA2Tc4AFUbnvBFYE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","CalculatorForm","ResultTable","useState","jsxDEV","_jsxDEV","App","_s","currentSaving","setCurrentSaving","yearlyContribution","setYearlyContribution","expectedReturn","setExpectedReturn","duration","setDuration","resetHandler","calculateHandler","userInput","yearlyData","currentSavings","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","expectedRetur","_c","$RefreshReg$"],"sources":["/home/taner/React/investment-calculator/src/App.js"],"sourcesContent":["import Header from \"./components/Header\";\nimport CalculatorForm from \"./components/CalculatorForm\";\nimport ResultTable from \"./components/ResultTable\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [currentSaving, setCurrentSaving] = useState(\"\");\n  const [yearlyContribution, setYearlyContribution] = useState(\"\");\n  const [expectedReturn, setExpectedReturn] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n\n  const resetHandler = () =>{\n\n    setCurrentSaving(\"\");\n    setDuration(\"\");\n    setExpectedReturn(\"\");\n    setYearlyContribution(\"\");\n\n  }\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n    \n      <Header />\n      <CalculatorForm resetHandler={resetHandler} setCurrentSaving={setCurrentSaving} setYearlyContribution={setYearlyContribution} setExpectedReturn={setExpectedReturn} setDuration={setDuration} currentSaving={currentSaving}\n      yearlyContribution={yearlyContribution} expectedRetur={expectedReturn} duration={duration}  />\n      <ResultTable />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,qBAAqB;AACxC,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMa,YAAY,GAAGA,CAAA,KAAK;IAExBP,gBAAgB,CAAC,EAAE,CAAC;IACpBM,WAAW,CAAC,EAAE,CAAC;IACfF,iBAAiB,CAAC,EAAE,CAAC;IACrBF,qBAAqB,CAAC,EAAE,CAAC;EAE3B,CAAC;EAED,MAAMM,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMR,kBAAkB,GAAG,CAACQ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMN,cAAc,GAAG,CAACM,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMJ,QAAQ,GAAG,CAACI,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,QAAQ,EAAEO,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGF,cAAc,GAAGR,cAAc;MACtDQ,cAAc,IAAIE,cAAc,GAAGZ,kBAAkB;MACrDS,UAAU,CAACI,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEL,cAAc;QAChCV,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACA;EACF,CAAC;;EAED,oBACEL,OAAA;IAAAqB,QAAA,gBAEErB,OAAA,CAACL,MAAM;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVzB,OAAA,CAACJ,cAAc;MAACe,YAAY,EAAEA,YAAa;MAACP,gBAAgB,EAAEA,gBAAiB;MAACE,qBAAqB,EAAEA,qBAAsB;MAACE,iBAAiB,EAAEA,iBAAkB;MAACE,WAAW,EAAEA,WAAY;MAACP,aAAa,EAAEA,aAAc;MAC3NE,kBAAkB,EAAEA,kBAAmB;MAACqB,aAAa,EAAEnB,cAAe;MAACE,QAAQ,EAAEA;IAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC9FzB,OAAA,CAACH,WAAW;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAACvB,EAAA,CAlDQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}